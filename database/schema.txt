
# Database Schema

### **1. user**
Stores registered users.  
```sql
user (
  id INT PK AUTO_INCREMENT,

  username VARCHAR(150) UNIQUE NOT NULL,
  created_at DATETIME
)
```

---

### **2. conversation**
Stores conversations linked to users.  
```sql
conversation (
  id INT PK AUTO_INCREMENT,
  user_id INT FK â†’ user.id,
  created_at DATETIME
)
```

---

### **3. message**
Stores chat messages in a conversation.  
```sql
message (
  id INT PK AUTO_INCREMENT,
  conversation_id INT FK â†’ conversation.id,
  sender VARCHAR(50),          -- "user" or "assistant"
  text TEXT,
  meta TEXT,
  created_at DATETIME
)
```

---

### **4. employees**
Main employee table.  
```sql
employees (
  employee_id INT PK AUTO_INCREMENT,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  phone VARCHAR(20),
  hire_date DATE NOT NULL,
  job_title VARCHAR(100),
  department VARCHAR(100),
  salary DECIMAL(10,2),
  manager_id INT FK â†’ employees.employee_id,   -- self-referencing
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
)
```

---

### **5. employee_addresses**
Employee addresses.  
```sql
employee_addresses (
  address_id INT PK AUTO_INCREMENT,
  employee_id INT FK â†’ employees.employee_id ON DELETE CASCADE,
  address_type ENUM('Home','Office','Other') DEFAULT 'Home',
  street VARCHAR(150),
  city VARCHAR(100),
  state VARCHAR(100),
  postal_code VARCHAR(20),
  country VARCHAR(100)
)
```

---

### **6. employee_projects**
Employee project assignments.  
```sql
employee_projects (
  project_id INT PK AUTO_INCREMENT,
  employee_id INT FK â†’ employees.employee_id ON DELETE CASCADE,
  project_name VARCHAR(100) NOT NULL,
  role VARCHAR(50),
  start_date DATE,
  end_date DATE
)
```

---

## ðŸ”— Relationships (ER summary)

- **user â†’ conversation â†’ message**  
  A user has many conversations, and each conversation has many messages.  

- **employees â†’ employee_addresses**  
  An employee can have multiple addresses.  

- **employees â†’ employee_projects**  
  An employee can work on multiple projects.  

- **employees (manager_id)**  
  Self-referencing: an employee can be managed by another employee.  
